from typing import Any, Callable, Dict, List, Literal, Optional, TextIO, \
    TypeVar, Union
from . import dispatch
from . import process
from . import _cptree

__version__: str

class HTTPError(Exception):
    def __call__(self) -> 'ResponseBody': ...

class HTTPRedirect(HTTPError):
    pass

class NotFound(HTTPError):
    pass

class Request:
    headers: Dict[str, str] = ...
    config: Dict[str, Any] = ...
    handler: Optional[Callable[[], 'ResponseBody']] = ...
    method: str = ...
    show_tracebacks: bool = ...
    path_info: str = ...
    query_string: str = ...
    json: Union[List[Any], Dict[str, Any]] = ...
    login: Optional[Union[Literal[False], str]] = ...

class ResponseBody:
    pass

class Response:
    body: ResponseBody = ...
    status: int = ...
    headers: Dict[str, str] = ...

class Serving:
    request: Request = ...
    response: Response = ...

serving: Serving = ...
request: Request = ...
response: Response = ...
session: Dict[str, str] = ...
config: Dict[str, Any] = ...

engine = process.bus
tree: _cptree.Tree = ...

Application = TypeVar('Application', bound=object, covariant=True)
ExposedFunction = Callable[[Application], str]
JSONFunction = Callable[[Application], Union[List[Any], Dict[str, Any]]]

def expose(func: ExposedFunction, alias: Optional[str] = ...) -> ExposedFunction: ...

class Toolbox:
    @staticmethod
    def json_in() -> Callable[[ExposedFunction], ExposedFunction]: ...
    @staticmethod
    def json_out() -> Callable[[JSONFunction], ExposedFunction]: ...

tools = Toolbox

def quickstart(root: Optional[Application] = ..., script_name: str = ..., config: Optional[Union[TextIO, Dict[str, Any]]] = ...) -> None: ...
